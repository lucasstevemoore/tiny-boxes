/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class FixidityLib extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): FixidityLib;
  methods: {
    abs(x: number | string): TransactionObject<string>;

    add(x: number | string, y: number | string): TransactionObject<string>;

    convertFixed(
      x: number | string,
      _originDigits: number | string,
      _destinationDigits: number | string
    ): TransactionObject<string>;

    digits(): TransactionObject<string>;

    divide(x: number | string, y: number | string): TransactionObject<string>;

    fixed1(): TransactionObject<string>;

    fractional(x: number | string): TransactionObject<string>;

    fromFixed(x: number | string): TransactionObject<string>;

    integer(x: number | string): TransactionObject<string>;

    maxFixedAdd(): TransactionObject<string>;

    maxFixedDiv(): TransactionObject<string>;

    maxFixedDivisor(): TransactionObject<string>;

    maxFixedMul(): TransactionObject<string>;

    maxFixedSub(): TransactionObject<string>;

    maxInt256(): TransactionObject<string>;

    maxNewFixed(): TransactionObject<string>;

    minInt256(): TransactionObject<string>;

    minNewFixed(): TransactionObject<string>;

    mulPrecision(): TransactionObject<string>;

    multiply(x: number | string, y: number | string): TransactionObject<string>;

    newFixed(x: number | string): TransactionObject<string>;

    newFixedFraction(
      numerator: number | string,
      denominator: number | string
    ): TransactionObject<string>;

    reciprocal(x: number | string): TransactionObject<string>;

    subtract(x: number | string, y: number | string): TransactionObject<string>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
