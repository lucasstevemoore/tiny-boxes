/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ENSInterface extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): ENSInterface;
  methods: {
    owner(node: string | number[]): TransactionObject<string>;

    resolver(node: string | number[]): TransactionObject<string>;

    setOwner(node: string | number[], _owner: string): TransactionObject<void>;

    setResolver(
      node: string | number[],
      _resolver: string
    ): TransactionObject<void>;

    setSubnodeOwner(
      node: string | number[],
      label: string | number[],
      _owner: string
    ): TransactionObject<void>;

    setTTL(
      node: string | number[],
      _ttl: number | string
    ): TransactionObject<void>;

    ttl(node: string | number[]): TransactionObject<string>;
  };
  events: {
    NewOwner: ContractEvent<{
      node: string;
      label: string;
      owner: string;
      0: string;
      1: string;
      2: string;
    }>;
    NewResolver: ContractEvent<{
      node: string;
      resolver: string;
      0: string;
      1: string;
    }>;
    NewTTL: ContractEvent<{
      node: string;
      ttl: string;
      0: string;
      1: string;
    }>;
    Transfer: ContractEvent<{
      node: string;
      owner: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
